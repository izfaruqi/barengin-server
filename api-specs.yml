openapi: 3.0.0
info:
  title: Bareng.in Server API
  version: 0.1.0
tags:
  - name: auth
  - name: user
  - name: admin_required
  - name: seller_required
  - name: provider
  - name: group_category
paths:
  /provider:
    get:
      tags:
        - provider
      summary: Get all providers
      description: Get the list of all providers.
      responses:
        '200': 
          description: Returns the list of all providers.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/Provider"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - admin_required
        - provider
      security:
        - bearerJWT: []
      summary: Add new provider.
      description: Add new provider.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  $ref: "#/components/schemas/Provider/properties/name"   
      responses:
        '200': 
          description: Returns the new provider id.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Provider"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /provider/{id}:
    post:
      tags:
        - admin_required
        - provider
      security:
        - bearerJWT: []
      summary: Edit provider by id.
      description: Edit provider by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Provider ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Provider/properties/name"   
      responses:
        '200': 
          description: Returns the edited fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    $ref: "#/components/schemas/Provider/properties/name"  
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - admin_required
        - provider
      security:
        - bearerJWT: []
      summary: Delete provider by id.
      description: Delete provider by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Provider ID
      responses:
        '200': 
          content:
            application/json:
              schema: 
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  
  /group-category:
      get:
        tags:
          - group_category
        summary: Get all group categories
        description: Get the list of all group categories.
        responses:
          '200': 
            description: Returns the list of all group categories.
            content:
              application/json:
                schema: 
                  type: array
                  items:
                    $ref: "#/components/schemas/GroupCategory"
          default:
            $ref: "#/components/responses/UnexpectedError"
      post:
        tags:
          - admin_required
          - group_category
        security:
          - bearerJWT: []
        summary: Add new group category.
        description: Add new group category.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - price
                  - packagePrice
                  - description
                properties:
                  name:
                    type: string
                    minLength: 1
                  price:
                    type: number
                    min: 0
                  packagePrice:
                    type: number
                    min: 0
                  description:
                    type: string
        responses:
          '200': 
            description: Returns the group category id.
            content:
              application/json:
                schema: 
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      type: number
          '400':
            $ref: "#/components/responses/BadRequestError"
          '401':
            $ref: "#/components/responses/MalformedJWTError"
          '403':
            $ref: "#/components/responses/NotEnoughPrivilegeError"
          default:
            $ref: "#/components/responses/UnexpectedError"
            
  /group-category/{id}:
      get:
        tags:
          - group_category
        summary: Get group category by id
        description: Get group category by id.
        parameters:
          - in: path
            name: id
            schema:
              type: number
            required: true
            description: Group category ID
        responses:
          '200': 
            description: Returns the group category object.
            content:
              application/json:
                schema: 
                  $ref: "#/components/schemas/GroupCategory"
          default:
            $ref: "#/components/responses/UnexpectedError"
      post:
        tags:
          - admin_required
          - group_category
        security:
          - bearerJWT: []
        summary: Edit group category by id.
        description: Edit group category by id.
        parameters:
          - in: path
            name: id
            schema:
              type: number
            required: true
            description: Group category ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    minLength: 1
                  price:
                    type: number
                    min: 0
                  packagePrice:
                    type: number
                    min: 0
                  description:
                    type: string 
        responses:
          '200': 
            description: Returns the edited fields.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                      minLength: 1
                    price:
                      type: number
                      min: 0
                    packagePrice:
                      type: number
                      min: 0
                    description:
                      type: string   
          '400':
            $ref: "#/components/responses/BadRequestError"
          '401':
            $ref: "#/components/responses/MalformedJWTError"
          '403':
            $ref: "#/components/responses/NotEnoughPrivilegeError"
          default:
            $ref: "#/components/responses/UnexpectedError"
      delete:
        tags:
          - admin_required
          - group_category
        security:
          - bearerJWT: []
        summary: Delete group category by id.
        description: Delete group category by id.
        parameters:
          - in: path
            name: id
            schema:
              type: number
            required: true
            description: Group category ID
        responses:
          '200': 
            content:
              application/json:
                schema: 
                  type: object
                  required:
                    - success
                  properties:
                    success:
                      type: boolean
                      default: true
          '400':
            $ref: "#/components/responses/BadRequestError"
          '401':
            $ref: "#/components/responses/MalformedJWTError"
          '403':
            $ref: "#/components/responses/NotEnoughPrivilegeError"
          default:
            $ref: "#/components/responses/UnexpectedError"
  
  /user/:
    get:
      tags:
        - user
      security:
        - bearerJWT: []
      summary: Get current user
      description: Get current user by auth token supplied.
      responses:
        '200': 
          description: Returns full user profile.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post: 
      tags:
        - user
      security:
        - bearerJWT: []
      summary: Edit current user profile
      description: Edit current user profile by auth token supplied.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEdit"
      responses: 
        '200':
          description: Returns the edited fields.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEdit"
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
        
  /user/all:
    get:
      tags:
        - user
        - admin_required
      security:
        - bearerJWT: []
      summary: Get list of all users
      description: Get the full profiles of all users
      responses:
        '200':
          description: Returns the full profiles of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                  
  /user/{id}:
    get:
      tags:
        - user
        - admin_required
      security:
        - bearerJWT: []
      summary: Get user full profile by id
      description: Get user full profile by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: User ID
      responses:
        '200':
          description: Returns the full profile of the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Invalid token/not enough privilege.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - user
        - admin_required
      security:
        - bearerJWT: []
      summary: Delete user by id
      description: Delete user by id. JWT token of the deleted user may still be active until expired.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: User ID
      responses:
        '200': 
          description: Success message.
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Invalid token/not enough privilege.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - user
        - admin_required
      security:
        - bearerJWT: []
      summary: Edit user profile by id
      description: Edit user profile by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEdit"
      responses:
        '200':
          description: Returns the edited fields.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEdit"
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Invalid token/not enough privilege.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
          
  /user/login:
    post:
      tags:
        - auth
        - user
      summary: Login with email and password
      description: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
          
      responses:
        '200':
          description: Returns a JWT token for the user. Valid for 24 hours.
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Invalid email/password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
          
  /user/register:
    post:
      tags:
        - auth
        - user
      summary: Register new user with email & password.
      description: Register new user with email & password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
              properties:
                email:
                  $ref: "#/components/schemas/User/properties/email"
                password:
                  type: string
                  minLength: 8
                firstName:
                  $ref: "#/components/schemas/User/properties/firstName"
                lastName:
                  $ref: "#/components/schemas/User/properties/lastName"
                isAdmin:
                  $ref: "#/components/schemas/User/properties/isAdmin"
                isSeller:
                  $ref: "#/components/schemas/User/properties/isSeller"
                referralCode:
                  $ref: "#/components/schemas/User/properties/referralCode"
      responses:
        '200':
          description: Returns registered user id.
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: number
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Email already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
        
  /user/tokenswap:
    post:
      tags:
        - auth
        - user
      summary: |
                Get JWT token from Firebase's idToken
      description: |
                    This endpoint is used after signing in with Firebase to recieve a JWT token from Firebase's auth result.
                    If the user described in the idToken is not registered,
                    the user will be registered with the data supplied from the idToken itself and the `profile` field
                    and the generated user id will be returned with the token. 
                    The `profile` field is recommended to be the `additionalUserInfo` object from Firebase's auth result object.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firebaseIdToken
                - profile
              properties:
                firebaseIdToken:
                  type: string
                profile: 
                  type: object
                  required:
                    - given_name
                  properties:
                    given_name:
                      type: string
                    family_name:
                      type: string
      responses:
        '200':
          description: Returns a JWT token for the user and the registered user id (if user is not registered). Valid for 24 hours.
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                  id:
                    type: number
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Invalid/expired idToken.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
                             
components:
  responses:
    BadRequestError:
      description: Invalid request.
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    MalformedJWTError:
      description: Malformed/expired JWT.
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    NotEnoughPrivilegeError:
      description: Not enough privilege error.
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: Unexpected error.
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required:
        - statusCode
        - error
        - message
      properties:
        statusCode:
          type: number
        error:
          type: string
        message:
          type: string
        validation:
          type: object
    User:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - isAdmin
        - isSeller
        - balance
      properties:
        id:
          type: number
        email:
          type: string
          format: email
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
        isAdmin:
          type: boolean
          default: false
        isSeller:
          type: boolean
          default: false
        balance:
          type: number
          default: 0
        address:
          type: string
        birthDate:
          type: number
        phone:
          type: number
        emailVerified:
          type: boolean
        referralCode:
          type: string
        referredBy:
          $ref: "#/components/schemas/UserReferred"
        referredUsers:
          type: array
          items: 
            $ref: "#/components/schemas/UserReferred"
    UserReferred:
      description: Dummy model for circular refrence workaround for Swagger UI. This model is exactly the same as User and should be treated as such.
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - isAdmin
        - isSeller
        - balance
      properties:
        id:
          type: number
        email:
          type: string
          format: email
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
        isAdmin:
          type: boolean
          default: false
        isSeller:
          type: boolean
          default: false
        balance:
          type: number
          default: 0
        address:
          type: string
        birthDate:
          type: number
        phone:
          type: number
        emailVerified:
          type: boolean
        referralCode:
          type: string
        referredBy:
          $ref: "#/components/schemas/User"
        referredUsers:
          type: array
          items: 
            $ref: "#/components/schemas/User"
    Provider:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
        name:
          type: string
          minLength: 1
    GroupCategory:
      type: object
      required:
        - id
        - name
        - price
        - packagePrice
        - description
      properties:
        id:
          type: number
        name:
          type: string
          minLength: 1
        price:
          type: number
          min: 0
        packagePrice:
          type: number
          min: 0
        description:
          type: string
    UserEdit:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
        isAdmin:
          type: boolean
          default: false
        isSeller:
          type: boolean
          default: false
        address:
          type: string
        birthDate:
          type: number
        phone:
          type: number
          
  securitySchemes:
    bearerJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT