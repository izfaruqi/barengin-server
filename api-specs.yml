openapi: 3.0.0
info:
  title: Bareng.in Server API
  version: 0.1.0
tags:
  - name: root
  - name: admin_required
  - name: seller_required
  - name: auth
  - name: user
  - name: provider
  - name: group_category
  - name: balance_mutation
  - name: review
  - name: discussion
  - name: group
  - name: transaction
paths:
  /:
    get:
      tags: 
        - root
      summary: Get api version
      responses:
        '200': 
          description: Returns the api version.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  version:
                    type: string
        default:
          $ref: "#/components/responses/UnexpectedError"
  /landing-stats:
    get:
      tags: 
        - root
      summary: Get landing page stats
      responses:
        '200': 
          description: Returns the landing page stats.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  users:
                    type: number
                  groups:
                    type: number
                  groupCategories:
                    type: number
        default:
          $ref: "#/components/responses/UnexpectedError"
  /provider:
    get:
      tags:
        - provider
      summary: Get all providers
      description: Get the list of all providers.
      responses:
        '200': 
          description: Returns the list of all providers.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/Provider"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - admin_required
        - provider
      security:
        - bearerJWT: []
      summary: Add new provider.
      description: Add new provider.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  $ref: "#/components/schemas/Provider/properties/name"   
      responses:
        '200': 
          description: Returns the new provider id.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Provider"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /provider/{id}:
    post:
      tags:
        - admin_required
        - provider
      security:
        - bearerJWT: []
      summary: Edit provider by id.
      description: Edit provider by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Provider ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Provider/properties/name"   
      responses:
        '200': 
          description: Returns the edited fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    $ref: "#/components/schemas/Provider/properties/name"  
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - admin_required
        - provider
      security:
        - bearerJWT: []
      summary: Delete provider by id.
      description: Delete provider by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Provider ID
      responses:
        '200': 
          content:
            application/json:
              schema: 
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  
  /group-category:
      get:
        tags:
          - group_category
        security:
          - bearerJWT: []
        summary: Get all group categories
        description: Get the list of all group categories.
        responses:
          '200': 
            description: Returns the list of all group categories.
            content:
              application/json:
                schema: 
                  type: array
                  items:
                    $ref: "#/components/schemas/GroupCategory"
          '400':
            $ref: "#/components/responses/BadRequestError"
          '401':
            $ref: "#/components/responses/MalformedJWTError"
          default:
            $ref: "#/components/responses/UnexpectedError"
      post:
        tags:
          - admin_required
          - group_category
        security:
          - bearerJWT: []
        summary: Add new group category.
        description: Add new group category.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - price
                  - packagePrice
                  - description
                properties:
                  name:
                    type: string
                    minLength: 1
                  price:
                    type: number
                    min: 0
                  packagePrice:
                    type: number
                    min: 0
                  description:
                    type: string
        responses:
          '200': 
            description: Returns the group category id.
            content:
              application/json:
                schema: 
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      type: number
          '400':
            $ref: "#/components/responses/BadRequestError"
          '401':
            $ref: "#/components/responses/MalformedJWTError"
          '403':
            $ref: "#/components/responses/NotEnoughPrivilegeError"
          default:
            $ref: "#/components/responses/UnexpectedError"
  /group-category/{id}:
      get:
        tags:
          - group_category
        security:
          - bearerJWT: []
        summary: Get group category by id
        description: Get group category by id.
        parameters:
          - in: path
            name: id
            schema:
              type: number
            required: true
            description: Group category ID
        responses:
          '200': 
            description: Returns the group category object.
            content:
              application/json:
                schema: 
                  $ref: "#/components/schemas/GroupCategory"
          '400':
            $ref: "#/components/responses/BadRequestError"
          '401':
            $ref: "#/components/responses/MalformedJWTError"
          '404':
            $ref: "#/components/responses/NotFoundError"
          default:
            $ref: "#/components/responses/UnexpectedError"
      post:
        tags:
          - admin_required
          - group_category
        security:
          - bearerJWT: []
        summary: Edit group category by id.
        description: Edit group category by id.
        parameters:
          - in: path
            name: id
            schema:
              type: number
            required: true
            description: Group category ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    minLength: 1
                  price:
                    type: number
                    min: 0
                  packagePrice:
                    type: number
                    min: 0
                  description:
                    type: string 
        responses:
          '200': 
            description: Returns the edited fields.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                      minLength: 1
                    price:
                      type: number
                      min: 0
                    packagePrice:
                      type: number
                      min: 0
                    description:
                      type: string   
          '400':
            $ref: "#/components/responses/BadRequestError"
          '401':
            $ref: "#/components/responses/MalformedJWTError"
          '403':
            $ref: "#/components/responses/NotEnoughPrivilegeError"
          '404':
            $ref: "#/components/responses/NotFoundError"
          default:
            $ref: "#/components/responses/UnexpectedError"
      delete:
        tags:
          - admin_required
          - group_category
        security:
          - bearerJWT: []
        summary: Delete group category by id.
        description: Delete group category by id.
        parameters:
          - in: path
            name: id
            schema:
              type: number
            required: true
            description: Group category ID
        responses:
          '200': 
            content:
              application/json:
                schema: 
                  type: object
                  required:
                    - success
                  properties:
                    success:
                      type: boolean
                      default: true
          '400':
            $ref: "#/components/responses/BadRequestError"
          '401':
            $ref: "#/components/responses/MalformedJWTError"
          '403':
            $ref: "#/components/responses/NotEnoughPrivilegeError"
          '404':
            $ref: "#/components/responses/NotFoundError"
          default:
            $ref: "#/components/responses/UnexpectedError"
  
  /balance-mutation:
    get:
      tags:
        - balance_mutation
      summary: Get all balance mutations for the user
      description: Get the list of all all balance mutations for the user.
      responses:
        '200': 
          description: Returns the list of all balance mutations for the user.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/BalanceMutation"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  
  /review:
    get:
      tags:
        - review
      security:
        - bearerJWT: []
      summary: Get all reviews for the user
      description: Get all reviews for the user.
      responses:
        '200': 
          description: Returns the list of all reviews for the user.
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  required:
                    - id
                    - group
                    - rating
                    - content
                    - anonymous
                    - publishedAt
                  properties:
                    id:
                      type: number
                    rating:
                      type: number
                      min: 1
                      max: 5
                    content:
                      type: string
                    anonymous:
                      type: boolean
                    owner:
                      type: object
                      properties: 
                        id:
                          type: number
                        firstName:
                          type: string
                        lastName:
                          type: string
                    group:
                      type: object
                    publishedAt:
                      type: string
                      format: date-time
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /review/{id}:
    post:
      tags:
          - review
      security:
        - bearerJWT: []
      summary: Edit review by id.
      description: Edit review by id. After the review is published, only content and anonymous status can be changed.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Review ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  min: 1
                  max: 5
                content:
                  type: string
                anonymous:
                  type: boolean
      responses:
        '200': 
          description: Returns the edited fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  rating:
                    type: number
                    min: 1
                    max: 5
                  content:
                    type: string
                  anonymous:
                    type: boolean   
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /review/seller:
    get:
      tags:
          - review
      summary: Get all published reviews for the seller
      description: Get all published reviews for the seller.
      responses:
        '200': 
          description: Returns the list of all published reviews for the seller.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
         
        default:
          $ref: "#/components/responses/UnexpectedError"
          
  /discussion/{groupId}/message:
    get:
      tags:
        - discussion
      security:
        - bearerJWT: []
      summary: Get messages from group discussion
      description: Get messages from group discussion.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Group category ID
        - in: query
          name: since
          schema:
            type: string
            format: date-time
          description: Get messages since this time.
        - in: query
          name: until
          schema:
            type: string
            format: date-time
          description: Get messages until this time.
      responses:
        '200': 
          description: Returns a list of discussion messages.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionMessage"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - discussion
      security:
        - bearerJWT: []
      summary: Send message to group discussion
      description: Send message to group discussion.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Group category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '200': 
          description: Returns the id of the message.
          content:
            application/json:
              schema: 
                type: object
                required:
                  - id
                properties:
                  id:
                    type: number
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  
  /group:
    get:
      tags:
        - admin_required
        - group
      security:
        - bearerJWT: []
      summary: Get all groups
      description: Get the list of all groups.
      responses:
        '200': 
          description: Returns the list of all groups.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - seller_required
        - group
      security:
        - bearerJWT: []
      summary: Add new group
      description: Add new group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - slotsAvailable
                - slotsTaken
                - rules
              properties:
                name:
                  type: string
                slotsAvailable:
                  type: number
                slotsTaken:
                  type: number
                rules:
                  type: string
      responses:
        '200': 
          description: Returns the group id.
          content:
            application/json:
              schema: 
                type: object
                required:
                  - id
                properties:
                  id:
                    type: number
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /group/joined:
    get:
      tags:
        - group
      security:
        - bearerJWT: []
      summary: Get all joined groups
      description: Get all joined groups.
      responses:
        '200': 
          description: Returns the list of groups.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /group/owned:
    get:
      tags:
        - group
        - seller_required
      security:
        - bearerJWT: []
      summary: Get all owned groups
      description: Get all owned groups.
      responses:
        '200': 
          description: Returns the list of groups.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /group/{id}:
    get:
      tags:
        - group
      security:
        - bearerJWT: []
      summary: Get group by id
      description: Get group by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Group ID
        - in: query
          name: full
          schema:
            type: boolean
          description: Fetch full data (admin/owner ownly)
      responses:
        '200': 
          description: Returns the group object.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Group"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - group
      security:
        - bearerJWT: []
      summary: Edit group by id.
      description: Edit group by id. Only admins or owner can edit a group.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Group ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                rules:
                  type: string
      responses:
        '200': 
          description: Returns the edited fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  rules:
                    type: string  
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - group
      security:
        - bearerJWT: []
      summary: Delete group by id.
      description: Delete group by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Group ID
      responses:
        '200': 
          content:
            application/json:
              schema: 
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /group/group-category/{groupCategoryId}:
    get:
      tags:
        - group
      security:
        - bearerJWT: []
      summary: Get all groups by group category id.
      description: Get the list of all groups by group category id.
      parameters:
        - in: path
          name: groupCategoryId
          schema:
            type: number
          required: true
          description: Group category ID
      responses:
        '200': 
          description: Returns the list of groups.
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  required:
                    - id
                    - name
                    - slotsAvailable
                    - slotsTaken
                    - rules
                    - groupCategory
                    - owner
                  properties:
                    id:
                      type: number
                    name:
                      type: string
                    slotsAvailable:
                      type: number
                    slotsTaken:
                      type: number
                    rules:
                      type: string
                    groupCategory:
                      $ref: "#/components/schemas/GroupCategory"
                    owner:
                      type: object
                      properties:
                        id:
                          type: number
                        firstName:
                          type: string
                        lastName:
                          type: string
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /group/group-category/{groupCategoryId}/search:
    get:
      tags:
        - group
      security:
        - bearerJWT: []
      summary: Search groups in a group category.
      description: "Search groups in a group category. The query will be matched against the group's name and the owner's first and last name."
      parameters:
        - in: path
          name: groupCategoryId
          schema:
            type: number
          required: true
          description: Group category ID
        - in: query
          name: query
          schema:
            type: string
          required: true
          description: Search query
      responses:
        '200': 
          description: Returns the list of groups.
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  required:
                    - id
                    - name
                    - slotsAvailable
                    - slotsTaken
                    - rules
                    - groupCategory
                    - owner
                  properties:
                    id:
                      type: number
                    name:
                      type: string
                    slotsAvailable:
                      type: number
                    slotsTaken:
                      type: number
                    rules:
                      type: string
                    groupCategory:
                      $ref: "#/components/schemas/GroupCategory"
                    owner:
                      type: object
                      properties:
                        id:
                          type: number
                        firstName:
                          type: string
                        lastName:
                          type: string
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /group/{groupId}/membership/{membershipId}:
    delete:
      tags:
        - admin_required
        - group
      security:
        - bearerJWT: []
      summary: "Revoke a user's membership to a group"
      description: "Revoke a user's membership to a group"
      parameters:
        - in: path
          name: groupId
          schema:
            type: number
          required: true
          description: Group ID
        - in: path
          name: membershipId
          schema:
            type: number
          required: true
          description: Membership ID
      responses:
        '200': 
          content:
            application/json:
              schema: 
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /group/{id}/credentials:
    get:
      tags:
        - group
      security:
        - bearerJWT: []
      summary: Get all accessible credentials to a group
      description: Get all accessible credentials to a group. If queried by the owner, will return all credentials to the group.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Group ID
      responses:
        '200': 
          description: Returns the group category object.
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  required:
                    - id
                    - credential
                  properties:
                    id:
                      type: number
                    credential:
                      type: number
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          $ref: "#/components/responses/NotEnoughPrivilegeError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /group/credential/{id}:
    post:
      tags:
        - group
      security:
        - bearerJWT: []
      summary: Edit group credential by id.
      description: Edit credential by id. Only owner can edit.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Credential ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credential:
                  type: string
      responses:
        '200': 
          description: Returns the edited fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  credential:
                    type: string
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /transaction/insert:
    post:
      tags:
        - transaction
      security:
        - bearerJWT: []
      summary: Insert a new transaction.
      description: Insert a new transaction. Set transactionType to `topup` for topping up (`items` will be ignored). Top up is only allowed via midtrans. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - paymentMethod
                - transactionType
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      slotsTaken: 
                        type: number
                      id:
                        type: number
                      relationToOwner:
                        type: string
                transactionType:
                  type: string
                  enum: [sale, topup]
                paymentMethod:
                  type: string
                  enum: [midtrans, balance]
                topupAmount:
                  type: number
      responses:
        '200': 
          description: Returns the transaction id and midtrans redirect url (if midtrans is used).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  midtransOrderId:
                    type: string
                  midtransRedirect:
                    type: string
        '400':
          $ref: "#/components/responses/BadRequestError"
        '402':
          description: Insufficient balance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          description: User already has a pending transaction or is already a member of one of the groups.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /transaction:
    get:
      tags:
        - transaction
      security:
        - bearerJWT: []
      summary: Get all transactions for user
      description: Get all transactions for user.
      responses:
        '200': 
          description: Returns all the list of all transactions for the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                    transactionType:
                      type: string
                      enum: [sale, topup]
                    paymentMethod:
                      type: string
                      enum: [midtrans, balance]
                    totalPrice:
                      type: number
                    paymentStatus:
                      type: string
                      enum: [settled, pending, expired, cancelled]
                    midtransRedirect:
                      type: string
                    midtransOrderId:
                      type: string
                    paidAt:
                      type: string
                      format: date-time
                    createdAt:
                      type: string
                      format: date-time
                    expiresAt:
                      type: string
                      format: date-time
                    items:
                      $ref: "#/components/schemas/TransactionItem"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /transaction/withdraw-balance:
    post:
      tags:
        - transaction
      security:
        - bearerJWT: []
      summary: Withdraw balance from current user
      description: Withdraw balance from current user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:  
                  type: number
                  min: 0
      responses:
        '200': 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '402':
          description: Insufficient balance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /transaction/sale:
    get:
      tags:
        - transaction
      security:
        - bearerJWT: []
      summary: Get all sales for user
      description: Get all sales for user.
      responses:
        '200': 
          description: Returns all the list of all sales (TransactionItem) for the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionItem"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /transaction/sale/{id}/imburse:
    post:
      tags:
        - admin_required
        - transaction
      security:
        - bearerJWT: []
      summary: Imburses a sale to the seller
      description: Imburses a sale to the seller. Imbursed sales cannot be refunded.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Transaction ID
      responses:
        '200': 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          description: Transaction already imbursed/refunded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /transaction/sale/{id}/refund:
    post:
      tags:
        - transaction
      security:
        - bearerJWT: []
      summary: Refunds a sale to the buyer
      description: Refunds a sale to the buyer. Refunded sales cannot be imbursed.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Transaction ID
      responses:
        '200': 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          description: Transaction already refunded/imbursed/past refund cutoff date.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /transaction/{id}:
    get:
      tags:
        - admin_required
        - transaction
      security:
        - bearerJWT: []
      summary: Get transaction by id
      description: Get transaction by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Transaction ID
      responses:
        '200': 
          description: Returns all the list of all transactions for the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /transaction/{id}/cancel:
    post:
      tags:
        - transaction
      security:
        - bearerJWT: []
      summary: Cancel transaction by id
      description: Cancel transaction by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Transaction ID
      responses:
        '200': 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          description: Transaction already cancelled/settled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /transaction/{id}/midtrans-manual-update-status:
    post:
      tags:
        - transaction
      security:
        - bearerJWT: []
      summary: Trigger manual midtrans recheck
      description: Trigger manual recheck of transaction to midtrans.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Transaction ID
      responses:
        '200': 
          description: Returns current payment status from midtrans.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [settled, pending]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/MalformedJWTError"
        '403':
          description: Transaction not eligible for rechecking.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /transaction/midtrans-notification:
    post:
      tags:
        - transaction
      summary: Endpoint for automatic midtrans payment notifications
      description: Endpoint for automatic midtrans payment notifications. Should not be manually triggerd.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': 
          description: Returns current payment status from midtrans.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [settled, pending]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '403':
          description: Signature key mismatch.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /user/:
    get:
      tags:
        - user
      security:
        - bearerJWT: []
      summary: Get current user
      description: Get current user by auth token supplied.
      responses:
        '200': 
          description: Returns full user profile.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post: 
      tags:
        - user
      security:
        - bearerJWT: []
      summary: Edit current user profile
      description: Edit current user profile by auth token supplied.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEdit"
      responses: 
        '200':
          description: Returns the edited fields.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEdit"
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /user/all:
    get:
      tags:
        - user
        - admin_required
      security:
        - bearerJWT: []
      summary: Get list of all users
      description: Get the full profiles of all users
      responses:
        '200':
          description: Returns the full profiles of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"  
  /user/{id}:
    get:
      tags:
        - user
        - admin_required
      security:
        - bearerJWT: []
      summary: Get user full profile by id
      description: Get user full profile by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: User ID
      responses:
        '200':
          description: Returns the full profile of the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Invalid token/not enough privilege.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - user
        - admin_required
      security:
        - bearerJWT: []
      summary: Delete user by id
      description: Delete user by id. JWT token of the deleted user may still be active until expired.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: User ID
      responses:
        '200': 
          description: Success message.
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Invalid token/not enough privilege.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      tags:
        - user
        - admin_required
      security:
        - bearerJWT: []
      summary: Edit user profile by id
      description: Edit user profile by id.
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEdit"
      responses:
        '200':
          description: Returns the edited fields.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEdit"
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Invalid token/not enough privilege.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /user/login:
    post:
      tags:
        - auth
        - user
      summary: Login with email and password
      description: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
          
      responses:
        '200':
          description: Returns a JWT token for the user. Valid for 24 hours.
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Invalid email/password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /user/register:
    post:
      tags:
        - auth
        - user
      summary: Register new user with email & password.
      description: Register new user with email & password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
              properties:
                email:
                  $ref: "#/components/schemas/User/properties/email"
                password:
                  type: string
                  minLength: 8
                firstName:
                  $ref: "#/components/schemas/User/properties/firstName"
                lastName:
                  $ref: "#/components/schemas/User/properties/lastName"
                isAdmin:
                  $ref: "#/components/schemas/User/properties/isAdmin"
                isSeller:
                  $ref: "#/components/schemas/User/properties/isSeller"
                referralCode:
                  $ref: "#/components/schemas/User/properties/referralCode"
      responses:
        '200':
          description: Returns registered user id.
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: number
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Email already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"     
  /user/tokenswap:
    post:
      tags:
        - auth
        - user
      summary: |
                Get JWT token from Firebase's idToken
      description: |
                    This endpoint is used after signing in with Firebase to recieve a JWT token from Firebase's auth result.
                    If the user described in the idToken is not registered,
                    the user will be registered with the data supplied from the idToken itself and the `profile` field
                    and the generated user id will be returned with the token. 
                    The `profile` field is recommended to be the `additionalUserInfo` object from Firebase's auth result object.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firebaseIdToken
                - profile
              properties:
                firebaseIdToken:
                  type: string
                profile: 
                  type: object
                  required:
                    - given_name
                  properties:
                    given_name:
                      type: string
                    family_name:
                      type: string
      responses:
        '200':
          description: Returns a JWT token for the user and the registered user id (if user is not registered). Valid for 24 hours.
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                  id:
                    type: number
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Invalid/expired idToken.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          $ref: "#/components/responses/UnexpectedError"
                             
components:
  responses:
    NotFoundError:
      description: Resource not found.
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    BadRequestError:
      description: Invalid request.
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    MalformedJWTError:
      description: Malformed/expired JWT.
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    NotEnoughPrivilegeError:
      description: Not enough privilege error.
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: Unexpected error.
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required:
        - statusCode
        - error
        - message
      properties:
        statusCode:
          type: number
        error:
          type: string
        message:
          type: string
        validation:
          type: object
    User:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - isAdmin
        - isSeller
        - balance
      properties:
        id:
          type: number
        email:
          type: string
          format: email
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
        isAdmin:
          type: boolean
          default: false
        isSeller:
          type: boolean
          default: false
        balance:
          type: number
          default: 0
        address:
          type: string
        birthDate:
          type: number
        phone:
          type: number
        emailVerified:
          type: boolean
        referralCode:
          type: string
        referredBy:
          $ref: "#/components/schemas/UserReferred"
        referredUsers:
          type: array
          items: 
            $ref: "#/components/schemas/UserReferred"
    UserReferred:
      description: Dummy model for circular refrence workaround for Swagger UI. This model is exactly the same as User and should be treated as such.
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - isAdmin
        - isSeller
        - balance
      properties:
        id:
          type: number
        email:
          type: string
          format: email
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
        isAdmin:
          type: boolean
          default: false
        isSeller:
          type: boolean
          default: false
        balance:
          type: number
          default: 0
        address:
          type: string
        birthDate:
          type: number
        phone:
          type: number
        emailVerified:
          type: boolean
        referralCode:
          type: string
        referredBy:
          $ref: "#/components/schemas/User"
        referredUsers:
          type: array
          items: 
            $ref: "#/components/schemas/User"
    UserEdit:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
        isAdmin:
          type: boolean
          default: false
        isSeller:
          type: boolean
          default: false
        address:
          type: string
        birthDate:
          type: number
        phone:
          type: number
    Provider:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
        name:
          type: string
          minLength: 1
    GroupCategory:
      type: object
      required:
        - id
        - name
        - price
        - packagePrice
        - description
      properties:
        id:
          type: number
        name:
          type: string
          minLength: 1
        price:
          type: number
          min: 0
        packagePrice:
          type: number
          min: 0
        description:
          type: string
    BalanceMutation:
      type: object
      required:
        - id
        - mutation
        - mutationStatus
        - createdAt
      properties:
        id:
          type: number
        mutation:
          type: number
        mutationStatus:
          type: string
          enum: [settled, held]
        createdAt:
          type: string
          format: date-time
    Review:
      type: object
      required:
        - id
        - owner
        - transactionItem
        - group
        - rating
        - content
        - anonymous
        - publishedAt
      properties:
        id:
          type: number
        rating:
          type: number
          min: 1
          max: 5
        owner:
          type: object
          properties: 
            id:
              type: number
            firstName:
              type: string
            lastName:
              type: string
        transactionItem:
          type: object
        group:
          type: object
        mutation:
          type: number
        mutationStatus:
          type: string
          enum: [settled, held]
        publishedAt:
          type: string
          format: date-time
    DiscussionMessage:
      type: object
      required:
        - id
        - content
        - senderId
        - sentAt
      properties:
        id:
          type: number
        content:
          type: string
        senderId:
          type: number
        sentAt:
          type: string
          format: date-time
    Group:
      type: object
      required:
        - id
        - name
        - slotsAvailable
        - slotsTaken
        - rules
        - groupCategory
        - owner
      properties:
        id:
          type: number
        name:
          type: string
        slotsAvailable:
          type: number
        slotsTaken:
          type: number
        rules:
          type: string
        groupCategory:
          $ref: "#/components/schemas/GroupCategory"
        owner:
          type: object
          properties:
            id:
              type: number
            firstName:
              type: string
            lastName:
              type: string
        memberships:
          $ref: "#/components/schemas/GroupMembership"
    GroupMembership:
     type: object
     required:
       - id
       - member
       - joinedAt
     properties:
       id:
         type: number
       member:
         type: object
         properties:
           id:
             type: number
           firstName:
             type: string
           lastName:
             type: string
       joinedAt:
         type: string
         format: date-time
    Transaction:
      type: object
      properties:
        id:
          type: number
        transactionType:
          type: string
          enum: [sale, topup]
        paymentMethod:
          type: string
          enum: [midtrans, balance]
        totalPrice:
          type: number
        paymentStatus:
          type: string
          enum: [settled, pending, expired, cancelled]
        midtransRedirect:
          type: string
        midtransOrderId:
          type: string
        paidAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        items:
          $ref: "#/components/schemas/TransactionItem"
        buyer:
          type: object
          properties:
            id:
              type: number
            firstName:
              type: number
            lastName:
              type: number
    TransactionItem:
      type: object
      properties:
        id:
          type: number
        price:
          type: number
        name:
          type: string
        categoryName:
          type: string
        relationToOwner:
          type: string
        refundCutoffAt:
          type: string
          format: date-time
        refundedAt:
          type: string
          format: date-time
  securitySchemes:
    bearerJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT